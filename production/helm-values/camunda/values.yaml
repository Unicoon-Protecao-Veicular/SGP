# Values for Camunda Platform 8 (Chart Version 12.6.0)
# Optimized for a SINGLE-NODE k3s cluster with Longhorn storage.

global:
  image:
    pullPolicy: IfNotPresent
  ingress:
    enabled: false
  # --- CONFIGURAÇÃO MAIS IMPORTANTE: Usar Longhorn para TUDO ---
  storageClass: "longhorn" # Força todos os componentes a usarem Longhorn
  multitenancy:
    enabled: false

# --- Zeebe Configuration ---
zeebe:
  enabled: true
  # Configuração para SINGLE NODE: 1 réplica para tudo.
  replicas: 1                # Número de pods Zeebe Broker
  clusterSize: "1"           # Tamanho do cluster Zeebe
  partitionCount: "1"        # Número de partições
  replicationFactor: "1"     # Fator de replicação (deve ser <= clusterSize)

  # Ajuste de performance para single node
  resources:
    requests:
      cpu: "2000m"
      memory: "4Gi"          # Reduzido para caber no nó com outros componentes
    limits:
      cpu: "4000m"
      memory: "8Gi"
  env:
    - name: ZEEBE_BROKER_THREADS_CPU_THREAD_COUNT
      value: "2"             # Ajustado para uma CPU mais moderada
    - name: ZEEBE_BROKER_THREADS_IO_THREAD_COUNT
      value: "1"
  persistence:
    enabled: true
    size: 20Gi               # Reduzido para teste, pode aumentar se necessário

  gateway:
    enabled: true
    replicas: 1              # Apenas 1 gateway
    resources:
      requests:
        cpu: "500m"
        memory: "512Mi"
      limits:
        cpu: "1000m"
        memory: "1Gi"
    service:
      type: LoadBalancer     # Para acesso externo, se necessário

# --- Elasticsearch Configuration (SINGLE NODE SETUP) ---
elasticsearch:
  enabled: true
  # CONFIGURAÇÃO CRÍTICA: Modo single-node
  replicas: 1
  minimumMasterNodes: 1
  discovery:
    type: single-node        # Força o modo single-node

  # Ajusta a JVM para os recursos solicitados
  esJavaOpts: "-Xms4g -Xmx4g" # 4GB heap, dentro do limite de 8GB solicitado

  resources:
    requests:
      cpu: "2000m"
      memory: "8Gi"          # Solicita 8GB, a JVM usará 4GB
    limits:
      cpu: "4000m"
      memory: "12Gi"
  persistence:
    enabled: true
    size: 20Gi               # PVC já existe com 20Gi, mantendo o tamanho
    storageClass: "longhorn" # Explicitamente usa Longhorn

  # Configurações específicas para single-node e evitar criação de réplicas
  clusterName: "elastic"
  name: "camunda-platform-elasticsearch-master"
  roles:
    master: "true"
    data: "true"
    ingest: "true"
    remoteClusterClient: "true"
    ml: "false"
    transform: "false"
  bootstrap:
    memory_lock: false
  seedHosts: "[]"
  initialMasterNodes: "camunda-platform-elasticsearch-master-0"

# --- Operate Configuration ---
operate:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

# --- Tasklist Configuration ---
tasklist:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

# --- Optimize Configuration ---
optimize:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      cpu: "1000m"
      memory: "2Gi"

# --- Connectors Configuration ---
connectors:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1Gi"

# --- Identity & Auth Configuration ---
identity:
  enabled: true
  replicas: 1
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  keycloak:
    enabled: true
    replicas: 1
    resources:
      requests:
        cpu: "500m"
        memory: "1Gi"
      limits:
        cpu: "1500m"
        memory: "2Gi"
    postgresql:
      enabled: true
      primary:
        persistence:
          enabled: true
          size: 8Gi
          storageClass: "longhorn" # Garante que Keycloak também use Longhorn